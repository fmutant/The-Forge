RWTexture2D<float4> MotionBlurTexture : register(u0);
Texture2D<float4> SceneTexture : register(t1);
Texture2D<float3> VelocityDepthTexture : register(t10);
Texture2D<float2> NeighborMaxTexture : register(t12);
Texture2D<float> VarianceTexture : register(t13);

static const float gfPI = 3.14159265359f;
static const float gfEpsilon = 1e-6f;

#define USE_TILE_VARIANCE 1

cbuffer cbMotionBlurConsts : register(b3)
{
	int4 consts;
	int4 sizesi;
	float4 sizesf;
	float4 params;
}

SamplerState nearestSamplerBorderZero : register(s6);

float cone(float uvdiff, float vlen)
{
	return saturate(1.0f - uvdiff * vlen);
}
float cylinder(float uvdiff, float vlen)
{
	return 1.0f - smoothstep(0.95f * vlen, 1.05f * vlen, uvdiff);
}
float z_compare(float Za, float Zb)
{
	return saturate(1.0f - (Za - Zb) / min(Za, Zb));
}

float random(float2 sv_position)
{
	//interleaved gradient noise
	float noise_0to1 = frac(52.9829189f * frac(0.06711056f * sv_position.x + 0.00583715f * sv_position.y));
	return noise_0to1 * 2.0f - 1.0f;
}

int2 sOffset(float j)
{
	int2 offsets[] = {
		int2(-1,  0),
		int2( 1,  0),
		int2( 0, -1),
		int2( 0,  1),
	};
	return offsets[j * 4.0f + 0.5f];
}

[numthreads(32, 1, 1)]
void main(int3 DTid: SV_DispatchThreadId)
{
	float2 idf = float2(DTid.xy);
	float2 uv0 = idf * params.zw;
	
	int2 xy_pixel = DTid.xy;
	int2 xy_tile = xy_pixel / consts.xx;
	
	const float fN = params.x;
	const float fr = consts.x;
	const float fTau = 1.0f;
	const float fKappaInv = 1.0f / 40.0f;
	const float fEta = 0.95f;
	const float fGamma = 1.5f;
	const float fPhi = 27.0f;
	
	float j = random(idf);
	
	float4 Cx = SceneTexture.Load(int3(xy_pixel, 0));
	float2 Vn = NeighborMaxTexture.Load(int3(xy_tile + sOffset(j), 0)) * 2.0f - 1.0f;
	float Vnlen = length(Vn);
	[branch]
	if (Vnlen <= 0.5f)
	{
		MotionBlurTexture[DTid.xy] = Cx;
		return;
	}
	
	float3 VcD = VelocityDepthTexture.Load(int3(xy_pixel, 0));
	float2 Vc = VcD.xy * 2.0f - 1.0f;
	float Zp = VcD.z;
	float Vclen = length(Vc) + gfEpsilon;
	float Vcleninv = 1.0f / Vclen;
	
	float2 Wn = normalize(Vn);
	float2 Wp = float2(-Wn.y, Wn.x);
	if (dot(Wp, Vc) < 0.0f) Wp = -Wp;
	float2 Wc = (lerp(Wp, Vc * Vcleninv, min(Vclen - 0.5f, 0.0f) / fGamma));
	
	float total_weight = fN * Vcleninv * fKappaInv;
	float4 result = Cx * total_weight;
	
	const float fNinv = 1.0f / (fN + 1.0f);
	float j_prime = (1.0f + j * fEta * fPhi / fN) * fNinv;
	uint iu = 0u;

#if USE_TILE_VARIANCE
	float variance = VarianceTexture.Load(int3(xy_tile, 0));
	uint Nsamples[2] = {
		variance * fN,
		(1.0f - variance) * fN
	};
	float2 Nvectors[2] = {
		Vc,
		Vn
	};
#endif

	[loop]
	for (float i = 0.0f; i < fN; i += 1.0f)
	{
		float t = lerp(-fr, fr, i * fNinv + j_prime);
#if USE_TILE_VARIANCE
		if (0u == Nsamples[iu])
		{
			iu = 1u - iu;
		}
		float2 d = Nvectors[iu];
		--Nsamples[iu];
		iu = 1u - iu;
#else
		float2 d = (iu & 0x1u) ? Vc : Vn;
		++iu;
#endif
		
		
		float2 S = uv0 + t * d * params.zw;
		float3 VsD = VelocityDepthTexture.SampleLevel(nearestSamplerBorderZero, S, 0);
		float2 Vs = VsD.xy * 2.0f - 1.0f;
		float Zs = VsD.z;
		float4 Cs = SceneTexture.SampleLevel(nearestSamplerBorderZero, S, 0);
		float f = z_compare(Zp, Zs);
		float b = z_compare(Zs, Zp);
		
		float Vslen = length(Vs) + gfEpsilon;
		float weight = 0.0f;
		float Wa = abs(dot(Wc, d));
		float Vslenhalf = clamp(Vslen, gfEpsilon, 0.5f);
		float Wb = abs(dot(Vs / Vslenhalf, d));

		float T = t * Vnlen;
		weight += f * cone(T, 1.0f / Vslen) * Wb;
		weight += b * cone(T, Vcleninv) * Wa;
		weight += 2.0f * cylinder(T, min(Vslen, Vclen)) * max(Wa, Wb);
		
		total_weight += weight;
		result += Cs * weight;
	}

	MotionBlurTexture[DTid.xy] = result / total_weight;
}
