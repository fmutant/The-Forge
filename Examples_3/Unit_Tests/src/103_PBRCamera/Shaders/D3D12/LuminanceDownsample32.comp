#define REVISIION 4
#if 3 < REVISIION
	#define GROUP_SIZE_X 16u
	#define GROUP_SIZE_Y 16u
#else
	#define GROUP_SIZE_X 32u
	#define GROUP_SIZE_Y 32u
#endif
#define GROUP_LENGTH GROUP_SIZE_X * GROUP_SIZE_Y
#define GROUP_LENGTH_HALF GROUP_LENGTH >> 1u

RWTexture2D<min16float> LuminanceMipThis : register(u0); //1x1
Texture2D<min16float> LuminanceMipPrev : register(t0); //16x16

#if 3 < REVISIION
	groupshared min16float4 sLuminances[GROUP_LENGTH];
#else
	groupshared min16float sLuminances[GROUP_LENGTH];
#endif

[numthreads(GROUP_SIZE_X, GROUP_SIZE_Y, 1)]
void main(uint3 DTid : SV_DispatchThreadID, uint3 groupID : SV_GroupID, uint3 threadID : SV_GroupThreadID)
{
	uint Tid = threadID.x + threadID.y * GROUP_SIZE_X;
#if 3 < REVISIION
	uint3 xyz = uint3(DTid.xy << 1u, 0u);
	sLuminances[Tid].x = LuminanceMipPrev.Load(xyz, int2(0, 0)).x;
	sLuminances[Tid].y = LuminanceMipPrev.Load(xyz, int2(0, 1)).x;
	sLuminances[Tid].z = LuminanceMipPrev.Load(xyz, int2(1, 0)).x;
	sLuminances[Tid].w = LuminanceMipPrev.Load(xyz, int2(1, 1)).x;
#else
	sLuminances[Tid] = LuminanceMipPrev.Load(uint3(DTid.xy, 0)).x * min16float(0.0009765625h);
#endif
	
	GroupMemoryBarrierWithGroupSync();
#if 2 < REVISIION
	for (uint t = GROUP_LENGTH_HALF; 0u < t; t >>= 1u)
	{
		if (Tid < t)
			sLuminances[Tid] += sLuminances[Tid + t];
	
		GroupMemoryBarrierWithGroupSync();
	}
#else
	for (uint t = 1u; t < GROUP_LENGTH; t <<= 1u)
	{
#if 1 < REVISIION
		uint index = Tid * (t << 1u);
		if (index < GROUP_LENGTH)
			sLuminances[index] += sLuminances[index + t];
#else
		if (0u == Tid % (t << 1u))
			sLuminances[Tid] += sLuminances[Tid + t];
#endif
		GroupMemoryBarrierWithGroupSync();
	}
#endif

	if (0u == Tid)
#if 3 < REVISIION
		LuminanceMipThis[groupID.xy] = dot(sLuminances[0], min16float4(0.0009765625h, 0.0009765625h, 0.0009765625h, 0.0009765625h));
#else
		LuminanceMipThis[groupID.xy] = sLuminances[0];
#endif		
}