#include "atmosphereStructs.hlsl"

RWTexture2D<min16float4> TransmittanceLUT : register(u0);

float GetProfileDensity(float2 widths, float4 profile0, float4 profile1, float altitude)
{
	return saturate(altitude < widths.x ?
		profile0.x * exp(profile0.y * altitude) + profile0.z * altitude + profile0.w :
		profile1.x * exp(profile1.y * altitude) + profile1.z * altitude + profile1.w);
}

float ComputeOpticalLengthToTopAtmosphereBoundary(float2 widths, float4 profile0, float4 profile1, float r, float rsqr, float mu)
{
	const float r_mu = r * mu;
	const float r_mu_2 = 2.0f * r_mu;
	const float discriminant = max(rsqr * (mu * mu - 1.0) + mRadiusTopSqr, 0.0f);
	const float dx = max(sqrt(discriminant) - r_mu, 0.0f) * 0.002f; // 1.0f/500.0f
	const float dx_max = dx * 500.0f;
	const float radius_bottom = mRadiusBottom;
	// Integration loop.
	float result = 0.5f * dx * GetProfileDensity(widths, profile0, profile1, min(r - radius_bottom, 65000.0f));
	for (float d_i = dx; d_i < dx_max; d_i += dx)
	{
		// Distance between the current sample point and the planet center.
		float r_i = sqrt(d_i * d_i + r_mu_2 * d_i + rsqr);
		// Number density at the current sample point (divided by the number density
		// at the bottom of the atmosphere, yielding a dimensionless number).
		float y_i = GetProfileDensity(widths, profile0, profile1, min(r_i - radius_bottom, 65000.0f));
		result += y_i * dx;
	}
	
	float r_i = sqrt(dx_max * dx_max + r_mu_2 * dx_max + rsqr);
	result += 0.5f * dx * GetProfileDensity(widths, profile0, profile1, min(r_i - radius_bottom, 65000.0f));
	return result;
}

min16float3 ComputeOpticalLengthToTopAtmosphereBoundary3(min16float3 widths, min16float3x4 profile0, min16float3x4 profile1, float r, float rsqr, float mu)
{
	const float radius_bottom = mRadiusBottom;
	const float r_mu = r * mu;
	const float r_mu_2 = 2.0f * r_mu;
	const float discriminant = max(rsqr * (mu * mu - 1.0) + mRadiusTopSqr, 0.0f);
	const float dx_max = max(sqrt(discriminant) - r_mu, 0.0f);
	const float dx = dx_max * 0.002f; // 1.0f/500.0f
	
	const min16float dxh = min16float(dx);
	
	// Integration loop.
	min16float altitude = min16float(min(r - radius_bottom, 65000.0h));
	min16float3x4 profile = min16float3x4(
		altitude < widths.x ? profile0[0] : profile1[0],
		altitude < widths.y ? profile0[1] : profile1[1],
		altitude < widths.z ? profile0[2] : profile1[2]
	);
	min16float3 result;
	result.x = min16float(0.5h) * dxh * saturate(profile[0].x * exp(profile[0].y * altitude) + profile[0].z * altitude + profile[0].w);
	result.y = min16float(0.5h) * dxh * saturate(profile[1].x * exp(profile[1].y * altitude) + profile[1].z * altitude + profile[1].w);
	result.z = min16float(0.5h) * dxh * saturate(profile[2].x * exp(profile[2].y * altitude) + profile[2].z * altitude + profile[2].w);
	for (float d_i = dx; d_i < dx_max; d_i += dx)
	{
		// Distance between the current sample point and the planet center.
		float r_i = sqrt(d_i * d_i + r_mu_2 * d_i + rsqr);
		// Number density at the current sample point (divided by the number density
		// at the bottom of the atmosphere, yielding a dimensionless number).
		altitude = min16float(min(r_i - radius_bottom, 65000.0h));
		profile = min16float3x4(
			altitude < widths.x ? profile0[0] : profile1[0],
			altitude < widths.y ? profile0[1] : profile1[1],
			altitude < widths.z ? profile0[2] : profile1[2]
		);
		result.x += dxh * saturate(profile[0].x * exp(profile[0].y * altitude) + profile[0].z * altitude + profile[0].w);
		result.y += dxh * saturate(profile[1].x * exp(profile[1].y * altitude) + profile[1].z * altitude + profile[1].w);
		result.z += dxh * saturate(profile[2].x * exp(profile[2].y * altitude) + profile[2].z * altitude + profile[2].w);
	}
	float r_i = sqrt(dx_max * dx_max + r_mu_2 * dx_max + rsqr);
	altitude = min16float(min(r_i - radius_bottom, 65000.0h));
	profile = min16float3x4(
		altitude < widths.x ? profile0[0] : profile1[0],
		altitude < widths.y ? profile0[1] : profile1[1],
		altitude < widths.z ? profile0[2] : profile1[2]
	);
	result.x += min16float(0.5h) * dxh * saturate(profile[0].x * exp(profile[0].y * altitude) + profile[0].z * altitude + profile[0].w);
	result.y += min16float(0.5h) * dxh * saturate(profile[1].x * exp(profile[1].y * altitude) + profile[1].z * altitude + profile[1].w);
	result.z += min16float(0.5h) * dxh * saturate(profile[2].x * exp(profile[2].y * altitude) + profile[2].z * altitude + profile[2].w);
	return result;
}

void UV2TransmittanceLUTParams(float2 uv, out float view_zenith_cos, out float view_height, out float view_height_sqr)
{
	float distance_bound = mDistanceBound;
	
	float rho = distance_bound * uv.y;
	float rho_sqr = rho * rho;
	
	float rsqr = rho_sqr + mRadiusBottomSqr;
	view_height_sqr = rsqr;
	view_height = sqrt(rsqr);
	
	float d_min = mRadiusTop - view_height;
	float d_max = rho + distance_bound;
	float d = d_min + uv.x * (d_max - d_min);
	
	view_zenith_cos = 0.0f == d ? 1.0f : clamp(0.5f * (distance_bound * distance_bound - rho_sqr - d * d) / (view_height * d), -1.0f, 1.0f);
}

[numthreads(32, 32, 1)]
void main(uint3 tid : SV_DispatchThreadID, uint gidx : SV_GroupIndex, uint3 groupID : SV_GroupID)
{
	float2 tex_size_inv = mTransmittanceSizeInv;
	float2 half_pixel = float2(0.5f, 0.5f) * tex_size_inv;
	
	float2 uv = (float2(tid.xy) * tex_size_inv - half_pixel) / (float2(1.0f, 1.0f) - tex_size_inv);
	
	float r;
	float rsqr;
	float mu;
	UV2TransmittanceLUTParams(uv, mu, r, rsqr);

#if 0
	float3 transmittance0 = float3(0.0f, 0.0f, 0.0f);
	float3 optical_lengths0;
	optical_lengths0.x = ComputeOpticalLengthToTopAtmosphereBoundary(mLayerWidthRayleigh, mDensityRayleigh[0], mDensityRayleigh[1], r, rsqr, mu);
	optical_lengths0.y = ComputeOpticalLengthToTopAtmosphereBoundary(mLayerWidthMie, mDensityMie[0], mDensityMie[1], r, rsqr, mu);
	optical_lengths0.z = ComputeOpticalLengthToTopAtmosphereBoundary(mLayerWidthAbsorption, mDensityAbsorption[0], mDensityAbsorption[1], r, rsqr, mu);
	transmittance0 += mScatteringRayleigh * optical_lengths0.x;
	transmittance0 += mExtinctionMie * optical_lengths0.y;
	transmittance0 += mExtinctionAbsorption * optical_lengths0.z;
#endif
	min16float3 transmittance1 = min16float3(0.0h, 0.0h, 0.0h);
	min16float3 widths = min16float3(mLayerWidthRayleigh.x, mLayerWidthMie.x, mLayerWidthAbsorption.x);
	min16float3x4 densities0 = min16float3x4(mDensityRayleigh[0], mDensityMie[0], mDensityAbsorption[0]);
	min16float3x4 densities1 = min16float3x4(mDensityRayleigh[1], mDensityMie[1], mDensityAbsorption[1]);
	min16float3 optical_lengths1 = ComputeOpticalLengthToTopAtmosphereBoundary3(widths, densities0, densities1, r, rsqr, mu);
	transmittance1 += mScatteringRayleigh * optical_lengths1.x;
	transmittance1 += mExtinctionMie * optical_lengths1.y;
	transmittance1 += mExtinctionAbsorption * optical_lengths1.z;

	TransmittanceLUT[tid.xy] = min16float4(exp(-transmittance1), 1.0h);
	//TransmittanceLUT[tid.xy] = min16float4(optical_lengths1 - optical_lengths0, 1.0h);
}