RWTexture2D<min16float4> TransmittanceLUT : register(u0);

struct DensityProfileLayer
{
	float exp_term;
	float exp_scale;
	float linear_term;
	float constant_term;
};

struct DensityProfile
{
	DensityProfileLayer layers[2];
};

cbuffer cbAtmosphere : register(b0, UPDATE_FREQ_PER_FRAME)
{
	float mRadiusBottom;
	float mRadiusTop;
	float mRadiusBottomSqr;
	float mRadiusTopSqr;

	float3 mScatteringRayleigh;
	float mDistanceBound;
	
	float3 mScatteringMie;
	float mPhaseFunctionGMie;
	
	float3 mExtinctionMie;
	float mTransmittanceWidthInv;
	
	float3 mExtinctionAbsorption;
	float mTransmittanceHeightInv;

	float4 mDensityRayleigh[2];
	float2 mLayerWidthRayleigh;
	float2 mPad0;
	float4 mDensityMie[2];
	float2 mLayerWidthMie;
	float2 mPad1;
	float4 mDensityAbsorption[2];
	float2 mLayerWidthAbsorption;
	float2 mPad2;
}

float GetProfileDensity(float2 widths, float4 profile0, float4 profile1, float altitude)
{
	return saturate(altitude < widths.x ?
		profile0.x * exp(profile0.y * altitude) + profile0.z * altitude + profile0.w :
		profile1.x * exp(profile1.y * altitude) + profile1.z * altitude + profile1.w);
}

float ComputeOpticalLengthToTopAtmosphereBoundary(float2 widths, float4 profile0, float4 profile1, float r, float rsqr, float mu)
{
	const float r_mu = r * mu;
	const float r_mu_2 = 2.0f * r_mu;
	const float discriminant = max(rsqr * (mu * mu - 1.0) + mRadiusTopSqr, 0.0f);
	const float dx = max(sqrt(discriminant) - r_mu, 0.0f) * 0.002f; // 1.0f/500.0f
	const float dx_max = dx * 500.0f;
	const float radius_bottom = mRadiusBottom;
	// Integration loop.
	float result = 0.5f * dx * GetProfileDensity(widths, profile0, profile1, r - radius_bottom);
	for (float d_i = dx; d_i < dx_max; d_i += dx)
	{
		// Distance between the current sample point and the planet center.
		float r_i = sqrt(d_i * d_i + r_mu_2 * d_i + rsqr);
		// Number density at the current sample point (divided by the number density
		// at the bottom of the atmosphere, yielding a dimensionless number).
		float y_i = GetProfileDensity(widths, profile0, profile1, r_i - radius_bottom);
		result += y_i * dx;
	}
	
	float r_i = sqrt(dx_max * dx_max + r_mu_2 * dx_max + rsqr);
	result += 0.5f * dx * GetProfileDensity(widths, profile0, profile1, r_i - radius_bottom);
	return result;
}

[numthreads(32, 32, 1)]
void main(uint3 tid : SV_DispatchThreadID, uint gidx : SV_GroupIndex, uint3 groupID : SV_GroupID)
{
	float2 tex_size_inv = float2(mTransmittanceWidthInv, mTransmittanceHeightInv);
	float2 half_pixel = float2(0.5f, 0.5f) * tex_size_inv;
	float distance_bound = mDistanceBound;
	
	float2 mu_r = (float2(tid.xy) * tex_size_inv - half_pixel) / (float2(1.0f, 1.0f) - tex_size_inv);
	float rho = distance_bound * mu_r.y;
	float rho_sqr = rho * rho;
	
	float rsqr = rho_sqr + mRadiusBottomSqr;
	float r = sqrt(rsqr);
	
	float d_min = mRadiusTop - r;
	float d_max = rho + distance_bound;
	float d = max(d_min + mu_r.x * (d_max - d_min), 1e-6f);
	
	float mu = clamp(0.5f * (distance_bound * distance_bound - rho_sqr - d * d) / (r * d), -1.0f, 1.0f);
	
	float3 transmittance = float3(0.0f, 0.0f, 0.0f);
	
	transmittance += mScatteringRayleigh * ComputeOpticalLengthToTopAtmosphereBoundary(mLayerWidthRayleigh, mDensityRayleigh[0], mDensityRayleigh[1], r, rsqr, mu);
	transmittance += mExtinctionMie * ComputeOpticalLengthToTopAtmosphereBoundary(mLayerWidthMie, mDensityMie[0], mDensityMie[1], r, rsqr, mu);
	transmittance += mExtinctionAbsorption * ComputeOpticalLengthToTopAtmosphereBoundary(mLayerWidthAbsorption, mDensityAbsorption[0], mDensityAbsorption[1], r, rsqr, mu);
	
	TransmittanceLUT[tid.xy] = float4(exp(-transmittance), 1.0h);
}