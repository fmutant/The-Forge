#include "atmosphereStructs.hlsl"

Texture2D<min16float4> TransmittanceLUT : register(t0);
RWTexture2D<min16float4> IrradienceLUT : register(u1);
RWTexture2D<min16float4> IrradienceDeltaLUT : register(u2);

uint2 IrradienceLUTParams2TransmittanceUV(float r, float mu)
{
	// Distance to top atmosphere boundary for a horizontal ray at ground level.
	float H = sqrt(mRadiusTopSqr - mRadiusBottomSqr);
	// Distance to the horizon.
	float rsqr = r * r;
	float rho = sqrt(max(rsqr - mRadiusBottomSqr, 0.0f));
	// Distance to the top atmosphere boundary for the ray (r,mu), and its minimum
	// and maximum values over all mu - obtained for (r,1) and (r,mu_horizon).
	float discriminant = max(rsqr * (mu * mu - 1.0) + mRadiusTopSqr, 0.0f);
	float d = max(-r * mu + sqrt(discriminant), 0.0f);
	float d_min = mRadiusTop - r;
	float d_max = rho + H;
	float2 x_mu_r = float2((d - d_min) / (d_max - d_min), rho / H);

	float2 size;
	TransmittanceLUT.GetDimensions(size.x, size.y);
	size -= float2(1.0f, 1.0f);
	return uint2(size * x_mu_r + float2(0.5f, 0.5f));
}

void UV2IrradienceLUTParams(float2 uv, out float mu_s, out float r)
{
	mu_s = clamp(2.0f * uv.x - 1.0f, -1.0f, 1.0f);
	r = mRadiusBottom + uv.y * (mRadiusTop - mRadiusBottom);
}


[numthreads(64, 16, 1)]
void main(uint3 tid : SV_DispatchThreadID, uint gidx : SV_GroupIndex, uint3 groupID : SV_GroupID)
{
	float2 tex_size_inv = mIrradienceSizeInv;
	float2 half_pixel = float2(0.5f, 0.5f) * tex_size_inv;
	
	float2 uv = (float2(tid.xy) * tex_size_inv - half_pixel) / (float2(1.0f, 1.0f) - tex_size_inv);
	
	float r;
	float mu_s;
	UV2IrradienceLUTParams(uv, mu_s, r);
	
	float alpha_s = mSunAngularRadius;
	// Approximate average of the cosine factor mu_s over the visible fraction of the Sun disc.
	float average_cosine_factor = mu_s < -alpha_s ? 0.0f : (alpha_s < mu_s ? mu_s : 0.25f * (mu_s + alpha_s) * (mu_s + alpha_s) / (alpha_s));
	
	uint2 transmittanceXY = IrradienceLUTParams2TransmittanceUV(r, mu_s);
	min16float3 transmittance = TransmittanceLUT.Load(uint3(transmittanceXY, 0)).xyz;
	
	IrradienceDeltaLUT[tid.xy].xyz = (mSolarIrradience * transmittance) * average_cosine_factor;
	IrradienceDeltaLUT[tid.xy].w = min16float(0.0h);
	IrradienceLUT[tid.xy] = 0;
}